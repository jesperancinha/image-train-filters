akka {
    home = ""
    loggers = ["akka.event.Logging$DefaultLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    loggers-dispatcher = "akka.actor.default-dispatcher"
    loglevel = "DEBUG"
    logger-startup-timeout = 5s
    stdout-loglevel = "WARNING"
    log-config-on-start = off
    log-dead-letters = 10
    log-dead-letters-during-shutdown = off
    log-dead-letters-suspend-duration = 5 minutes
    library-extensions = ${?akka.library-extensions} ["akka.serialization.SerializationExtension$"]
    extensions = []
    daemonic = off
    jvm-exit-on-fatal-error = on
    jvm-shutdown-hooks = on
    fail-mixed-versions = on
    java-flight-recorder {
        enabled = true
    }
    version = 2.8.5
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    actor {
        debug {
          receive = off
          autoreceive = off
          lifecycle = off
          fsm = off
          event-stream = off
          unhandled = off
          router-misconfiguration = off
        }
        provider = "cluster"
        guardian-supervisor-strategy = "Akka.Actor.DefaultSupervisorStrategy"
        creation-timeout = 20s
        unstarted-push-timeout = 10s
        allow-java-serialization = off
        serialize-messages = off
        serialize-creators = off
        no-serialization-verification-needed-class-prefix = ["akka."]
    }
    scheduler {
        tick-duration = 10ms
        ticks-per-wheel = 512
        implementation = akka.actor.LightArrayRevolverScheduler
        shutdown-timeout = 5s
    }
    coordinated-shutdown {
        default-phase-timeout = 5 s
        terminate-actor-system = on
        exit-jvm = off
        exit-code = 0
        run-by-jvm-shutdown-hook = on
        run-by-actor-system-terminate = on
        reason-overrides {
          "akka.actor.CoordinatedShutdown$ClusterDowningReason$" {
            exit-code = -1
          }
          "akka.actor.CoordinatedShutdown$ClusterJoinUnsuccessfulReason$" {
            exit-code = -1
          }
    }
}

akka.http.server.request-timeout = 480 s

service {
  host = "0.0.0.0"
  port = 5000
}

image-train-filters {
  saveFiles = "false"
  image-source-path = "/tmp/image-train-filters/sources"
  image-destination-path = "/tmp/image-train-filters/destination"
}