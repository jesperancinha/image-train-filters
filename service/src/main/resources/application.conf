akka {
    home = ""
    loggers = ["akka.event.Logging$DefaultLogger"]
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    loggers-dispatcher = "akka.actor.default-dispatcher"
    loglevel = "DEBUG"
    logger-startup-timeout = 5s
    stdout-loglevel = "WARNING"
    log-config-on-start = off
    log-dead-letters = 10
    log-dead-letters-during-shutdown = off
    log-dead-letters-suspend-duration = 5 minutes
    library-extensions = ${?akka.library-extensions} ["akka.serialization.SerializationExtension$"]
    extensions = []
    daemonic = off
    jvm-exit-on-fatal-error = on
    jvm-shutdown-hooks = on
    fail-mixed-versions = on
    java-flight-recorder {
        enabled = true
    }
    version = 2.8.5
    event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
    actor {
        router = {
            type-mapping {
                  from-code = "akka.routing.NoRouter"
                  round-robin-pool = "akka.routing.RoundRobinPool"
                  round-robin-group = "akka.routing.RoundRobinGroup"
                  random-pool = "akka.routing.RandomPool"
                  random-group = "akka.routing.RandomGroup"
                  balancing-pool = "akka.routing.BalancingPool"
                  smallest-mailbox-pool = "akka.routing.SmallestMailboxPool"
                  broadcast-pool = "akka.routing.BroadcastPool"
                  broadcast-group = "akka.routing.BroadcastGroup"
                  scatter-gather-pool = "akka.routing.ScatterGatherFirstCompletedPool"
                  scatter-gather-group = "akka.routing.ScatterGatherFirstCompletedGroup"
                  tail-chopping-pool = "akka.routing.TailChoppingPool"
                  tail-chopping-group = "akka.routing.TailChoppingGroup"
                  consistent-hashing-pool = "akka.routing.ConsistentHashingPool"
                  consistent-hashing-group = "akka.routing.ConsistentHashingGroup"
            }
        }
        debug {
          receive = off
          autoreceive = off
          lifecycle = off
          fsm = off
          event-stream = off
          unhandled = off
          router-misconfiguration = off
        }
        provider = "cluster"
        guardian-supervisor-strategy = "Akka.Actor.DefaultSupervisorStrategy"
        creation-timeout = 20s
        unstarted-push-timeout = 10s
        allow-java-serialization = off
        serialize-messages = off
        serialize-creators = off
        no-serialization-verification-needed-class-prefix = ["akka."]
        deployment {
            default {
                dispatcher = ""
                mailbox = ""
                router = "from-code"
                nr-of-instances = 1
                within = 5 seconds
                virtual-nodes-factor = 10
                tail-chopping-router {
                  interval = 10 milliseconds
                }
                routees {
                  paths = []
                }
                resizer {
                  enabled = off
                  lower-bound = 1
                  upper-bound = 10
                  pressure-threshold = 1
                  rampup-rate = 0.2
                  backoff-threshold = 0.3
                  backoff-rate = 0.1
                  messages-per-resize = 10
                }
                optimal-size-exploring-resizer {
                  enabled = off
                  lower-bound = 1
                  upper-bound = 10
                  chance-of-ramping-down-when-full = 0.2
                  action-interval = 5s
                  downsize-after-underutilized-for = 72h
                  explore-step-size = 0.1
                  chance-of-exploration = 0.4
                  downsize-ratio = 0.8
                  optimization-range = 16
                  weight-of-latest-metric = 0.5
                }
            }
            "/IO-DNS/inet-address" {
                mailbox = "unbounded"
                router = "consistent-hashing-pool"
                nr-of-instances = 4
            }

            "/IO-DNS/inet-address/*" {
                 dispatcher = "akka.actor.default-blocking-io-dispatcher"
            }

            "/IO-DNS/async-dns" {
                mailbox = "unbounded"
                router = "round-robin-pool"
                nr-of-instances = 1
            }
        }
    }
    scheduler {
        tick-duration = 10ms
        ticks-per-wheel = 512
        implementation = akka.actor.LightArrayRevolverScheduler
        shutdown-timeout = 5s
    }
    coordinated-shutdown {
        default-phase-timeout = 5 s
        terminate-actor-system = on
        exit-jvm = off
        exit-code = 0
        run-by-jvm-shutdown-hook = on
        run-by-actor-system-terminate = on
        reason-overrides {
          "akka.actor.CoordinatedShutdown$ClusterDowningReason$" {
            exit-code = -1
          }
          "akka.actor.CoordinatedShutdown$ClusterJoinUnsuccessfulReason$" {
            exit-code = -1
          }
        }
    }
    remote {
        warn-about-direct-use = on
        use-unsafe-remote-features-outside-cluster = off
        warn-unsafe-watch-outside-cluster = on
        watch-failure-detector {
          implementation-class = "akka.remote.PhiAccrualFailureDetector"
          heartbeat-interval = 1 s
          threshold = 10.0
          max-sample-size = 200
          min-std-deviation = 100 ms
          acceptable-heartbeat-pause = 10 s
          unreachable-nodes-reaper-interval = 1s
          expected-response-after = 1 s

        }
        deployment {
          enable-whitelist = off
          whitelist = []
        }
        default-remote-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-min = 2
            parallelism-factor = 0.5
            parallelism-max = 16
          }
          throughput = 10
        }
        artery {
          enabled = on
          transport = tcp
          canonical {
            port = 25520
            hostname = "<getHostAddress>"
          }
          bind {
            port = ""
            hostname = ""
            bind-timeout = 3s
          }
          large-message-destinations = []
          untrusted-mode = off
          trusted-selection-paths = []
          log-received-messages = off
          log-sent-messages = off
          log-frame-size-exceeding = off
          ssl {
            ssl-engine-provider = akka.remote.artery.tcp.ConfigSSLEngineProvider
            config-ssl-engine {
              key-store = "keystore"
              key-store-password = "changeme"
              key-password = "changeme"
              trust-store = "truststore"
              trust-store-password = "changeme"
              protocol = "TLSv1.2"
              enabled-algorithms = ["TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
                "TLS_RSA_WITH_AES_128_CBC_SHA"]
              random-number-generator = ""
              require-mutual-authentication = on
              hostname-verification = off
            }
          }
        }
     }
}

akka.http.server.request-timeout = 480 s

service {
  host = "0.0.0.0"
  port = 5000
}

image-train-filters {
  saveFiles = "false"
  image-source-path = "/tmp/image-train-filters/sources"
  image-destination-path = "/tmp/image-train-filters/destination"
}
